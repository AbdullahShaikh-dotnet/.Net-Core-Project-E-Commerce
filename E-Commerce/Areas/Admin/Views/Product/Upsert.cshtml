@model ProductVM

@{
	ViewData["Title"] = "Product";
}

<div class="container mx-auto p-4">
	<div class="flex justify-between items-center pb-4">
		<h2 class="text-2xl font-bold text-indigo-600">@((Model.product.Id > 0 ? "Update " : "Create ") + ViewData["Title"])</h2>
	</div>
</div>


<form method="post" enctype="multipart/form-data" class="space-y-6">
	<input type="hidden" asp-for="product.Id" />
	@* <input type="hidden" asp-for="product.ImageURL" /> *@

	<div class="bg-white border border-slate-200 rounded-md p-6 space-y-6">
		<div class="grid grid-cols-1 md:grid-cols-2 gap-4">
			<div>
				<label asp-for="product.Title" class="block text-gray-700 font-medium"></label>
				<input asp-for="product.Title" class="w-full p-3 border rounded-md focus:ring-1 focus:ring-blue-500 outline-none shadow-sm transition duration-300 ease-in-out hover:border-blue-500" type="text" />
				<span class="text-red-500 text-sm" asp-validation-for="product.Title"></span>
			</div>
			<div>
				<label asp-for="product.Category_ID" class="block text-gray-700 font-medium"></label>
				<select asp-for="product.Category_ID" asp-items="@Model.categoryList" class="w-full p-3 border rounded-md focus:ring-1 focus:ring-blue-500 outline-none shadow-sm transition duration-300 ease-in-out hover:border-blue-500">
					<option disabled selected>Select Category</option>
				</select>
				<span class="text-red-500 text-sm" asp-validation-for="product.Category_ID"></span>
			</div>
		</div>

		<div class="grid grid-cols-1 md:grid-cols-2 gap-4">
			<div>
				<label asp-for="product.Author" class="block text-gray-700 font-medium"></label>
				<input asp-for="product.Author" class="w-full p-3 border rounded-md focus:ring-1 focus:ring-blue-500 outline-none shadow-sm transition duration-300 ease-in-out hover:border-blue-500" type="text" />
				<span class="text-red-500 text-sm" asp-validation-for="product.Author"></span>
			</div>
			<div>
				<label asp-for="product.ISBN" class="block text-gray-700 font-medium"></label>
				<input asp-for="product.ISBN" class="w-full p-3 border rounded-md focus:ring-1 focus:ring-blue-500 outline-none shadow-sm transition duration-300 ease-in-out hover:border-blue-500" type="text" />
				<span class="text-red-500 text-sm" asp-validation-for="product.ISBN"></span>
			</div>
		</div>

		<div class="flex items-center space-x-4">
			<!-- File Upload -->
			<div class="flex-1">
				<label asp-for="product.ProductImages" class="block text-gray-700 font-medium"></label>
				<input asp-for="product.ProductImages"
					   class="w-full p-3 border rounded-md focus:ring-1 focus:ring-blue-500 outline-none shadow-sm transition duration-300 ease-in-out hover:border-blue-500"
					   type="file" multiple
					   name="files" />
			</div>

			<!-- Image Preview -->
			<div class="relative max-w-5xl mx-auto px-10 py-1 mb-5">
				<div class="image-track-container group relative  overflow-hidden h-[200px] w-[700px] shadow rounded-lg">
					<div id="image-track" class="absolute top-1/2 left-0 flex gap-4 -translate-y-1/2" data-mouse-down-at="0" data-prev-percentage="0">
						@foreach (var ProductImage in Model.product.ProductImages)
						{
							<div class="image-slide relative h-[200px] w-[150px] overflow-hidden rounded-lg border-2 border-white bg-white transition-all duration-300">
								<a class="absolute top-1 right-1 bg-white/60 rounded p-1 hover:bg-white/80 transition-all duration-300" href="@ProductImage.ImageURL" target="_blank">
									<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-5">
										<path stroke-linecap="round" stroke-linejoin="round" d="M7.5 3.75H6A2.25 2.25 0 0 0 3.75 6v1.5M16.5 3.75H18A2.25 2.25 0 0 1 20.25 6v1.5m0 9V18A2.25 2.25 0 0 1 18 20.25h-1.5m-9 0H6A2.25 2.25 0 0 1 3.75 18v-1.5M15 12a3 3 0 1 1-6 0 3 3 0 0 1 6 0Z" />
									</svg>
								</a>
								<img src="@ProductImage.ImageURL" alt="Product image" class="image h-[200px] w-[200px] object-cover transition-transform duration-500" style="object-position: 100% center;" />
							</div>
						}
					</div>

					<!-- Navigation buttons -->
					<button id="prev-button" class="absolute left-0 top-1/2 z-10 flex h-10 w-10 -translate-y-1/2 items-center justify-center rounded-full bg-white/80 text-gray-800 shadow-md transition-all hover:bg-primary hover:text-white group-hover:opacity-100 md:opacity-0">
						<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6">
							<path stroke-linecap="round" stroke-linejoin="round" d="M15.75 19.5L8.25 12l7.5-7.5" />
						</svg>
					</button>
					<button id="next-button" class="absolute right-0 top-1/2 z-10 flex h-10 w-10 -translate-y-1/2 items-center justify-center rounded-full bg-white/80 text-gray-800 shadow-md transition-all hover:bg-primary hover:text-white group-hover:opacity-100 md:opacity-0">
						<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6">
							<path stroke-linecap="round" stroke-linejoin="round" d="M8.25 4.5l7.5 7.5-7.5 7.5" />
						</svg>
					</button>
				</div>

				<div class="absolute bottom-4 left-0 right-0 -bottom-5 flex justify-center gap-2">
					<span class="text-sm text-gray-500">Drag to explore more images</span>
				</div>
			</div>

			<style>
				:root {
					--primary: #3b82f6;
					--primary-hover: #2563eb;
				}

				.image-slide {
					transition: transform 0.3s ease, box-shadow 0.3s ease;
				}

				.image-track-container {
					cursor: grab;
				}

					.image-track-container:active {
						cursor: grabbing;
					}

				/* Add smooth transition for drag */
				#image-track {
					transition: transform 0.5s cubic-bezier(0.22, 1, 0.36, 1);
				}

				.image {
					transition: object-position 0.5s cubic-bezier(0.22, 1, 0.36, 1);
				}
			</style>

			@* <script>
				document.addEventListener("DOMContentLoaded", function() {
					const track = document.getElementById("image-track");
					const prevButton = document.getElementById("prev-button");
					const nextButton = document.getElementById("next-button");

					// Initialize
					let mouseDownAt = 0;
					let prevPercentage = 0;
					let percentage = 0;
					let isDragging = false;

					// Handle mouse events
					const handleMouseDown = (e) => {
						mouseDownAt = e.clientX;
						isDragging = true;

						// Remove transition during drag start for immediate response
						track.style.transition = "none";
						document.querySelectorAll(".image").forEach(img => {
							img.style.transition = "none";
						});

						// Prevent default behavior to avoid text selection during drag
						e.preventDefault();
					};

					const handleMouseUp = () => {
						if (!isDragging) return;

						mouseDownAt = 0;
						prevPercentage = percentage;
						isDragging = false;

						// Restore transitions after drag for smooth settling
						track.style.transition = "transform 0.5s cubic-bezier(0.22, 1, 0.36, 1)";
						document.querySelectorAll(".image").forEach(img => {
							img.style.transition = "object-position 0.5s cubic-bezier(0.22, 1, 0.36, 1)";
						});
					};

					const handleMouseMove = (e) => {
						if (!isDragging) return;

						const mouseDelta = mouseDownAt - e.clientX;
						const maxDelta = window.innerWidth / 2;

						// Calculate percentage moved
						const percentageDelta = (mouseDelta / maxDelta) * -100;
						const nextPercentageUnconstrained = prevPercentage + percentageDelta;
						percentage = Math.max(Math.min(nextPercentageUnconstrained, 0), -100);

						// Apply the transform without animation during drag for responsive feel
						track.style.transform = `translate(${percentage}%, -50%)`;

						// Update each image's object position
						document.querySelectorAll(".image").forEach(img => {
							img.style.objectPosition = `${100 + percentage}% center`;
						});
					};

					// Handle touch events
					const handleTouchStart = (e) => {
						mouseDownAt = e.touches[0].clientX;
						isDragging = true;

						// Remove transition during drag start
						track.style.transition = "none";
						document.querySelectorAll(".image").forEach(img => {
							img.style.transition = "none";
						});
					};

					const handleTouchMove = (e) => {
						if (!isDragging) return;

						const mouseDelta = mouseDownAt - e.touches[0].clientX;
						const maxDelta = window.innerWidth / 2;

						// Calculate percentage moved
						const percentageDelta = (mouseDelta / maxDelta) * -100;
						const nextPercentageUnconstrained = prevPercentage + percentageDelta;
						percentage = Math.max(Math.min(nextPercentageUnconstrained, 0), -100);

						// Apply the transform without animation during drag
						track.style.transform = `translate(${percentage}%, -50%)`;

						// Update each image's object position
						document.querySelectorAll(".image").forEach(img => {
							img.style.objectPosition = `${100 + percentage}% center`;
						});

						// Prevent page scrolling while dragging
						e.preventDefault();
					};

					const handleTouchEnd = () => {
						if (!isDragging) return;

						mouseDownAt = 0;
						prevPercentage = percentage;
						isDragging = false;

						// Restore transitions after drag
						track.style.transition = "transform 0.5s cubic-bezier(0.22, 1, 0.36, 1)";
						document.querySelectorAll(".image").forEach(img => {
							img.style.transition = "object-position 0.5s cubic-bezier(0.22, 1, 0.36, 1)";
						});
					};

					// Navigation buttons with smooth animation
					const moveTrack = (direction) => {
						// Ensure transitions are enabled for button navigation
						track.style.transition = "transform 0.5s cubic-bezier(0.22, 1, 0.36, 1)";
						document.querySelectorAll(".image").forEach(img => {
							img.style.transition = "object-position 0.5s cubic-bezier(0.22, 1, 0.36, 1)";
						});

						const moveAmount = direction === 'prev' ? 20 : -20;
						const newPercentage = Math.max(Math.min(prevPercentage + moveAmount, 0), -100);

						prevPercentage = newPercentage;
						percentage = newPercentage;

						// Apply smooth transition
						track.style.transform = `translate(${newPercentage}%, -50%)`;

						// Update each image's object position with smooth transition
						document.querySelectorAll(".image").forEach(img => {
							img.style.objectPosition = `${100 + newPercentage}% center`;
						});
					};

					// Add event listeners
					track.addEventListener("mousedown", handleMouseDown);
					window.addEventListener("mouseup", handleMouseUp);
					window.addEventListener("mousemove", handleMouseMove);

					track.addEventListener("touchstart", handleTouchStart, { passive: false });
					window.addEventListener("touchmove", handleTouchMove, { passive: false });
					window.addEventListener("touchend", handleTouchEnd);

					prevButton.addEventListener("click", () => moveTrack('prev'));
					nextButton.addEventListener("click", () => moveTrack('next'));

					// Prevent context menu on long press (mobile)
					track.addEventListener("contextmenu", (e) => e.preventDefault());

					// Handle mouse leaving the window
					window.addEventListener("mouseleave", handleMouseUp);

					// Initialize track position
					track.style.transform = `translate(0%, -50%)`;
				});
			</script> *@

			<script>
				document.addEventListener("DOMContentLoaded", function() {
					const track = document.getElementById("image-track");
					const prevButton = document.getElementById("prev-button");
					const nextButton = document.getElementById("next-button");
					const trackContainer = document.querySelector(".image-track-container");

					// Initialize
					let mouseDownAt = 0;
					let prevPercentage = 0;
					let percentage = 0;
					let isDragging = false;
					let animationFrameId = null;
					let targetPercentage = 0;
					let currentPercentage = 0;
					const sensitivity = 0.5; // Adjust this value for sensitivity (0.1 to 1)
					const easing = 0.05; // Adjust for smoothness (0.05 to 0.2)

					// Smooth animation function
					const animate = () => {
						// Ease towards the target percentage
						currentPercentage += (targetPercentage - currentPercentage) * easing;

						// Apply the transform
						track.style.transform = `translate(${currentPercentage}%, -50%)`;

						// Update each image's object position
						document.querySelectorAll(".image").forEach(img => {
							img.style.objectPosition = `${100 + currentPercentage}% center`;
						});

						// Continue animation if not reached target
						if (Math.abs(targetPercentage - currentPercentage) > 0.1) {
							animationFrameId = requestAnimationFrame(animate);
						}
					};

					// Handle mouse events
					const handleMouseDown = (e) => {
						// Cancel any ongoing animation
						if (animationFrameId) {
							cancelAnimationFrame(animationFrameId);
							animationFrameId = null;
						}

						mouseDownAt = e.clientX;
						isDragging = true;
						currentPercentage = targetPercentage = prevPercentage;

						// Remove transition during drag for immediate response
						track.style.transition = "none";
						document.querySelectorAll(".image").forEach(img => {
							img.style.transition = "none";
						});

						e.preventDefault();
					};

					const handleMouseUp = () => {
						if (!isDragging) return;

						mouseDownAt = 0;
						prevPercentage = percentage;
						isDragging = false;
						targetPercentage = percentage;

						// Start smooth animation after drag
						if (!animationFrameId) {
							animationFrameId = requestAnimationFrame(animate);
						}
					};

					const handleMouseMove = (e) => {
						if (!isDragging) return;

						const mouseDelta = mouseDownAt - e.clientX;
						const maxDelta = window.innerWidth / 2;

						// Calculate percentage moved
						const percentageDelta = (mouseDelta / maxDelta) * -100;
						const nextPercentageUnconstrained = prevPercentage + percentageDelta;
						percentage = Math.max(Math.min(nextPercentageUnconstrained, 0), -50);

						// Update current and target for immediate response
						currentPercentage = targetPercentage = percentage;

						// Apply the transform without animation during drag
						track.style.transform = `translate(${percentage}%, -50%)`;

						// Update each image's object position
						document.querySelectorAll(".image").forEach(img => {
							img.style.objectPosition = `${100 + percentage}% center`;
						});
					};

					// Handle touch events
					const handleTouchStart = (e) => {
						if (animationFrameId) {
							cancelAnimationFrame(animationFrameId);
							animationFrameId = null;
						}

						mouseDownAt = e.touches[0].clientX;
						isDragging = true;
						currentPercentage = targetPercentage = prevPercentage;

						track.style.transition = "none";
						document.querySelectorAll(".image").forEach(img => {
							img.style.transition = "none";
						});
					};

					const handleTouchMove = (e) => {
						if (!isDragging) return;

						const mouseDelta = mouseDownAt - e.touches[0].clientX;
						const maxDelta = window.innerWidth / 2;

						const percentageDelta = (mouseDelta / maxDelta) * -100;
						const nextPercentageUnconstrained = prevPercentage + percentageDelta;
						percentage = Math.max(Math.min(nextPercentageUnconstrained, 0), -100);

						currentPercentage = targetPercentage = percentage;

						track.style.transform = `translate(${percentage}%, -50%)`;

						document.querySelectorAll(".image").forEach(img => {
							img.style.objectPosition = `${100 + percentage}% center`;
						});

						e.preventDefault();
					};

					const handleTouchEnd = () => {
						if (!isDragging) return;

						mouseDownAt = 0;
						prevPercentage = percentage;
						isDragging = false;
						targetPercentage = percentage;

						if (!animationFrameId) {
							animationFrameId = requestAnimationFrame(animate);
						}
					};

					// Navigation buttons
					const moveTrack = (direction) => {
						// Cancel any ongoing animation
						if (animationFrameId) {
							cancelAnimationFrame(animationFrameId);
							animationFrameId = null;
						}

						const moveAmount = direction === 'prev' ? 20 : -20;
						targetPercentage = Math.max(Math.min(targetPercentage + moveAmount, 0), -100);

						prevPercentage = percentage = targetPercentage;

						// Start smooth animation
						if (!animationFrameId) {
							animationFrameId = requestAnimationFrame(animate);
						}
					};

					// Add event listeners
					track.addEventListener("mousedown", handleMouseDown);
					window.addEventListener("mouseup", handleMouseUp);
					window.addEventListener("mousemove", handleMouseMove);

					// Improved wheel event with passive:false for better control
					// trackContainer.addEventListener("wheel", handleWheel, { passive: false });

					track.addEventListener("touchstart", handleTouchStart, { passive: false });
					window.addEventListener("touchmove", handleTouchMove, { passive: false });
					window.addEventListener("touchend", handleTouchEnd);

					prevButton.addEventListener("click", () => moveTrack('prev'));
					nextButton.addEventListener("click", () => moveTrack('next'));

					// Prevent context menu on long press
					track.addEventListener("contextmenu", (e) => e.preventDefault());

					// Handle mouse leaving the window
					window.addEventListener("mouseleave", handleMouseUp);

					// Initialize
					currentPercentage = targetPercentage = 0;
					track.style.transform = `translate(0%, -50%)`;
				});
			</script>
		</div>


		<div class="grid grid-cols-1 md:grid-cols-4 gap-4">
			<div>
				<label asp-for="product.ListPrice" class="block text-gray-700 font-medium"></label>
				<input asp-for="product.ListPrice" class="w-full p-3 border rounded-md focus:ring-1 focus:ring-blue-500 outline-none shadow-sm transition duration-300 ease-in-out hover:border-blue-500" type="text" />
				<span class="text-red-500 text-sm" asp-validation-for="product.ListPrice"></span>
			</div>
			<div>
				<label asp-for="product.Price" class="block text-gray-700 font-medium"></label>
				<input asp-for="product.Price" class="w-full p-3 border rounded-md focus:ring-1 focus:ring-blue-500 outline-none shadow-sm transition duration-300 ease-in-out hover:border-blue-500" type="text" />
				<span class="text-red-500 text-sm" asp-validation-for="product.Price"></span>
			</div>
			<div>
				<label asp-for="product.Price50" class="block text-gray-700 font-medium"></label>
				<input asp-for="product.Price50" class="w-full p-3 border rounded-md focus:ring-1 focus:ring-blue-500 outline-none shadow-sm transition duration-300 ease-in-out hover:border-blue-500" type="text" />
				<span class="text-red-500 text-sm" asp-validation-for="product.Price50"></span>
			</div>
			<div>
				<label asp-for="product.Price100" class="block text-gray-700 font-medium"></label>
				<input asp-for="product.Price100" class="w-full p-3 border rounded-md focus:ring-1 focus:ring-blue-500 outline-none shadow-sm transition duration-300 ease-in-out hover:border-blue-500" type="text" />
				<span class="text-red-500 text-sm" asp-validation-for="product.Price100"></span>
			</div>
		</div>

		<div>
			<label asp-for="product.Description" class="block text-gray-700 font-medium"></label>
			<textarea asp-for="product.Description" rows="6" class="w-full p-3 border rounded-md focus:ring-1 focus:ring-blue-500 outline-none shadow-sm transition duration-300 ease-in-out hover:border-blue-500"></textarea>
			<span class="text-red-500 text-sm" asp-validation-for="product.Description"></span>
		</div>

		<div class="flex justify-between items-center">
			<a asp-controller="Product" asp-action="Index" class="text-gray-600 hover:text-blue-500 font-medium flex items-center">
				<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-5 h-5 mr-1">
					<path stroke-linecap="round" stroke-linejoin="round" d="M15.75 19.5L8.25 12l7.5-7.5" />
				</svg>
				Back to List
			</a>
			<div class="space-x-2 flex justify-end">
				@if (Model.product.Id == 0)
				{
					<button type="reset" class="btn-primary-outline">Clear</button>
					<button type="submit" class="btn-indigo">Create</button>
				}
				else
				{
					<button type="submit" class="btn-indigo">Update</button>
				}
			</div>
		</div>
	</div>



</form>


<script src="https://cdn.tiny.cloud/1/f0r85f4ubu7hkygrjjeg5r70sspl7k6y9u8bthskwy0ji4g5/tinymce/7/tinymce.min.js" referrerpolicy="origin"></script>
<!-- Swiper CSS -->
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/swiper/swiper-bundle.min.css" />
<!-- Swiper JS -->
<script src="https://cdn.jsdelivr.net/npm/swiper/swiper-bundle.min.js"></script>


<script>
	tinymce.init({
	  selector: 'textarea',
	  skin: 'oxide',
	  toolbar: 'undo redo | blocks fontfamily fontsize | bold italic underline strikethrough | link image media table mergetags | addcomment showcomments | spellcheckdialog a11ycheck typography | align lineheight | checklist numlist bullist indent outdent | emoticons charmap | removeformat',
	  plugins: [
		'advlist', 'autolink', 'lists', 'link', 'charmap', 'preview',
		'searchreplace', 'visualblocks', 'fullscreen',
		'insertdatetime', 'media', 'table', 'code'
	  ],
	  height: 250,
			  setup: function (editor) {
		editor.on('init', function () {
			document.querySelector('.tox.tox-tinymce').style.zIndex = '10';
		});
	}
	});

</script>

@section Scripts {

	@{
		<partial name="_ValidationScriptsPartial" />
	}
}
