@model string

@if (!string.IsNullOrEmpty(Model))
{
    var statusType = Model.StartsWith("Error") ? "error" : "success";
    var alertClasses = statusType == "error"
        ? "bg-white border-l-4 border-red-500 text-gray-800 shadow-lg"
        : "bg-white border-l-4 border-green-500 text-gray-800 shadow-lg";

    var iconColor = statusType == "error" ? "text-red-500" : "text-green-500";

    <div class="fixed top-4 right-4 max-w-md w-full p-0 rounded-md overflow-hidden @alertClasses alert-animate-in z-50">
        <div class="relative">
            <!-- Background ripple effect for material design feel -->
            <div class="absolute inset-0 overflow-hidden">
                <div class="absolute -inset-1 @(statusType == "error" ? "bg-red-50" : "bg-green-50") opacity-10 rounded-full blur-xl"></div>
            </div>

            <div class="relative flex items-start p-4">
                <!-- Icon container -->
                <div class="flex-shrink-0 pt-0.5">
                    @if (statusType == "error")
                    {
                        <div class="w-10 h-10 rounded-full bg-red-50 flex items-center justify-center">
                            <svg class="w-6 h-6 @iconColor" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z"></path>
                            </svg>
                        </div>
                    }
                    else
                    {
                        <div class="w-10 h-10 rounded-full bg-green-50 flex items-center justify-center">
                            <svg class="w-6 h-6 @iconColor" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                            </svg>
                        </div>
                    }
                </div>

                <!-- Content -->
                <div class="ml-3 flex-1 pt-0.5">
                    <p class="text-sm font-medium">@Model</p>
                </div>

                <!-- Close button with ripple effect -->
                <div class="ml-4 flex-shrink-0 flex">
                    <button type="button"
                            class="bg-transparent rounded-full p-1.5 inline-flex text-gray-400 hover:text-gray-500 hover:bg-gray-100 transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gray-400"
                            onclick="closeAlert(this)">
                        <svg class="h-5 w-5" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" aria-hidden="true">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                        </svg>
                    </button>
                </div>
            </div>

            <!-- Progress bar for auto-dismiss -->
            <div class="h-0.5 w-full bg-gray-100">
                <div class="h-full @(statusType == "error" ? "bg-red-500" : "bg-green-500") progress-bar"></div>
            </div>
        </div>
    </div>

    <style>
        .alert-animate-in {
            animation: slideInRight 0.3s cubic-bezier(0.4, 0, 0.2, 1) forwards;
            transform-origin: top right;
        }

        .alert-animate-out {
            animation: slideOutRight 0.3s cubic-bezier(0.4, 0, 0.2, 1) forwards;
        }

        @@keyframes slideInRight {
            from {
                opacity: 0;
                transform: translateX(20px);
            }

            to {
                opacity: 1;
                transform: translateX(0);
            }
        }

        @@keyframes slideOutRight {
            from {
                opacity: 1;
                transform: translateX(0);
            }

            to {
                opacity: 0;
                transform: translateX(20px);
            }
        }

        .progress-bar {
            animation: progressShrink 5s linear forwards;
            width: 100%;
        }

        @@keyframes progressShrink {
            0% {
                width: 100%;
            }

            100% {
                width: 0%;
            }
        }
    </style>

    <script>
        function closeAlert(button) {
            const alertElement = button.closest('.alert-animate-in');
            alertElement.classList.remove('alert-animate-in');
            alertElement.classList.add('alert-animate-out');

            setTimeout(() => {
                alertElement.remove();
            }, 300);
        }

        // Auto-dismiss after 5 seconds
        document.addEventListener('DOMContentLoaded', function() {
            const alerts = document.querySelectorAll('.alert-animate-in');
            alerts.forEach(alert => {
                setTimeout(() => {
                    if (alert && document.body.contains(alert)) {
                        alert.classList.remove('alert-animate-in');
                        alert.classList.add('alert-animate-out');

                        setTimeout(() => {
                            if (alert && document.body.contains(alert)) {
                                alert.remove();
                            }
                        }, 300);
                    }
                }, 5000);
            });
        });
    </script>
}