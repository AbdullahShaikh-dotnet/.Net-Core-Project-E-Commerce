@page
@model ResetPasswordModel
@{
    ViewData["Title"] = "Reset Password";
}

<div class="bg-white flex flex-col items-center justify-center p-4 sm:p-6">
    <div class="w-full max-w-md">
        <!-- Card with subtle shadow and border -->
        <div class="bg-white rounded-md border border-gray-100 overflow-hidden">


            <div class="p-6 sm:p-8">
                <!-- Header -->
                <div class="text-center mb-6">
                    <div class="inline-flex items-center justify-center w-16 h-16 rounded-full bg-gray-50 mb-4">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8 text-gray-600" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><rect x="3" y="11" width="18" height="11" rx="2" ry="2"></rect><path d="M7 11V7a5 5 0 0 1 10 0v4"></path></svg>
                    </div>
                    <h1 class="text-2xl font-bold text-gray-900">@ViewData["Title"]</h1>
                    <p class="text-gray-500 mt-2">
                        Create a new secure password for your account
                    </p>
                </div>
                
                <!-- Form -->
                <form method="post" class="space-y-5">
                    <div asp-validation-summary="ModelOnly" class="text-red-600 text-sm p-3 bg-red-50 rounded-md" role="alert"></div>
                    <input asp-for="Input.Code" type="hidden" />
                    
                    <div class="space-y-2">
                        <label asp-for="Input.Email" class="block text-sm font-medium text-gray-700">Email Address</label>
                        <div class="relative">
                            <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-gray-400" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M4 4h16c1.1 0 2 .9 2 2v12c0 1.1-.9 2-2 2H4c-1.1 0-2-.9-2-2V6c0-1.1.9-2 2-2z"></path><polyline points="22,6 12,13 2,6"></polyline></svg>
                            </div>
                            <input 
                                asp-for="Input.Email" 
                                class="block w-full pl-10 pr-3 py-3 border border-gray-300 rounded-md bg-gray-50 focus:ring-2 focus:ring-gray-500 focus:border-gray-500 text-gray-900 placeholder-gray-400 outline-none transition-all" 
                                autocomplete="username" 
                                aria-required="true" 
                                placeholder="name@example.com" 
                            />
                        </div>
                        <span asp-validation-for="Input.Email" class="text-red-500 text-sm"></span>
                    </div>
                    
                    <div class="space-y-2">
                        <label asp-for="Input.Password" class="block text-sm font-medium text-gray-700">New Password</label>
                        <div class="relative" x-data="{ show: false }">
                            <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-gray-400" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><rect x="3" y="11" width="18" height="11" rx="2" ry="2"></rect><path d="M7 11V7a5 5 0 0 1 10 0v4"></path></svg>
                            </div>
                            <input 
                                asp-for="Input.Password" 
                                type="password"
                                id="password"
                                oninput="checkPasswordStrength(this.value)"
                                class="block w-full pl-10 pr-10 py-3 border border-gray-300 rounded-md bg-gray-50 focus:ring-2 focus:ring-gray-500 focus:border-gray-500 text-gray-900 placeholder-gray-400 outline-none transition-all" 
                                autocomplete="new-password" 
                                aria-required="true" 
                                placeholder="Create a strong password" 
                            />
                            <button 
                                type="button"
                                    onclick="togglePasswordVisibility('password', event)"
                                class="absolute inset-y-0 right-0 pr-3 flex items-center text-gray-400 hover:text-gray-600"
                            >
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 password-toggle-icon" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z"></path><circle cx="12" cy="12" r="3"></circle></svg>
                            </button>
                        </div>
                        <span asp-validation-for="Input.Password" class="text-red-500 text-sm"></span>
                        
                        <!-- Password strength meter -->
                        <div class="mt-2">
                            <div class="flex justify-between mb-1">
                                <span class="text-xs text-gray-500">Password strength:</span>
                                <span class="text-xs font-medium" id="password-strength-text">None</span>
                            </div>
                            <div class="w-full bg-gray-200 rounded-md h-1.5">
                                <div class="bg-gray-300 h-1.5 rounded-md" id="password-strength-meter" style="width: 0%"></div>
                            </div>
                            <div class="mt-1 text-xs text-gray-500" id="password-requirements">
                                Password should be at least 8 characters with uppercase, lowercase, numbers, and special characters.
                            </div>
                        </div>
                    </div>
                    
                    <div class="space-y-2">
                        <label asp-for="Input.ConfirmPassword" class="block text-sm font-medium text-gray-700">Confirm Password</label>
                        <div class="relative">
                            <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-gray-400" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M12 22s8-4 8-10V5l-8-3-8 3v7c0 6 8 10 8 10z"></path></svg>
                            </div>
                            <input 
                                asp-for="Input.ConfirmPassword" 
                                type="password"
                                class="block w-full pl-10 pr-10 py-3 border border-gray-300 rounded-md bg-gray-50 focus:ring-2 focus:ring-gray-500 focus:border-gray-500 text-gray-900 placeholder-gray-400 outline-none transition-all" 
                                autocomplete="new-password" 
                                aria-required="true" 
                                placeholder="Confirm your password" 
                                oninput="checkPasswordMatch()"
                            />
                            <button 
                                type="button" 
                                onclick="togglePasswordVisibility('Input_ConfirmPassword', event)"
                                class="absolute inset-y-0 right-0 pr-3 flex items-center text-gray-400 hover:text-gray-600"
                            >
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 password-toggle-icon" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z"></path><circle cx="12" cy="12" r="3"></circle></svg>
                            </button>
                        </div>
                        <span asp-validation-for="Input.ConfirmPassword" class="text-red-500 text-sm"></span>
                        <div class="text-xs text-green-600 hidden" id="passwords-match">Passwords match ✓</div>
                    </div>
                    
                    <div class="pt-2">
                        <button 
                            type="submit" 
                            class="w-full flex items-center justify-center py-3 px-4 border border-transparent 
                                rounded-md shadow-sm text-base font-medium text-white bg-gray-900 hover:bg-gray-700 focus:outline-none
                                focus:ring-2 focus:ring-offset-2 focus:ring-gray-500 transition-colors">
                            Reset Password
                        </button>
                    </div>
                </form>
            </div>
        </div>
        
        <!-- Back link -->
        <div class="mt-6 text-center">
            <a 
                asp-page="./Login" 
                class="inline-flex items-center text-sm font-medium text-gray-600 hover:text-gray-500 transition-colors"
            >
                <svg xmlns="http://www.w3.org/2000/svg" class="mr-2 h-4 w-4" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><line x1="19" y1="12" x2="5" y2="12"></line><polyline points="12 19 5 12 12 5"></polyline></svg>
                Back to Login
            </a>
        </div>
    </div>
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <script>
        // Toggle password visibility
        function togglePasswordVisibility(inputId, e) {
            e.preventDefault()
            const input = document.getElementById(inputId);
            const type = input.getAttribute('type') === 'password' ? 'text' : 'password';
            input.setAttribute('type', type);
            
            // Toggle icon (would be better with a hide icon, but keeping it simple)
            const icon = input.parentElement.querySelector('.password-toggle-icon');
            if (type === 'text') {
                icon.innerHTML = '<path d="M17.94 17.94A10.07 10.07 0 0 1 12 20c-7 0-11-8-11-8a18.45 18.45 0 0 1 5.06-5.94M9.9 4.24A9.12 9.12 0 0 1 12 4c7 0 11 8 11 8a18.5 18.5 0 0 1-2.16 3.19m-6.72-1.07a3 3 0 1 1-4.24-4.24"></path><line x1="1" y1="1" x2="23" y2="23"></line>';
            } else {
                icon.innerHTML = '<path d="M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z"></path><circle cx="12" cy="12" r="3"></circle>';
            }
        }
        
        // Check password strength
        function checkPasswordStrength(password) {
            const meter = document.getElementById('password-strength-meter');
            const strengthText = document.getElementById('password-strength-text');
            const requirements = document.getElementById('password-requirements');
            
            // Default - no password
            if (!password) {
                meter.style.width = '0%';
                meter.className = 'bg-gray-300 h-1.5 rounded-full';
                strengthText.textContent = 'None';
                strengthText.className = 'text-xs font-medium text-gray-500';
                requirements.textContent = 'Password should be at least 8 characters with uppercase, lowercase, numbers, and special characters.';
                return;
            }
            
            // Calculate strength
            let strength = 0;
            let feedback = [];
            
            // Length check
            if (password.length >= 8) {
                strength += 25;
            } else {
                feedback.push('Add more characters (at least 8)');
            }
            
            // Uppercase check
            if (/[A-Z]/.test(password)) {
                strength += 25;
            } else {
                feedback.push('Add uppercase letters');
            }
            
            // Lowercase check
            if (/[a-z]/.test(password)) {
                strength += 25;
            } else {
                feedback.push('Add lowercase letters');
            }
            
            // Number or special char check
            if (/[0-9!@@#$%^&*(),.?":{}|<>]/.test(password)) {
                strength += 25;
            } else {
                feedback.push('Add numbers or special characters');
            }
            
            // Update the meter
            meter.style.width = strength + '%';
            
            // Update text and colors based on strength
            if (strength <= 25) {
                meter.className = 'bg-red-500 h-1.5 rounded-full';
                strengthText.textContent = 'Weak';
                strengthText.className = 'text-xs font-medium text-red-500';
            } else if (strength <= 50) {
                meter.className = 'bg-orange-500 h-1.5 rounded-full';
                strengthText.textContent = 'Fair';
                strengthText.className = 'text-xs font-medium text-orange-500';
            } else if (strength <= 75) {
                meter.className = 'bg-yellow-500 h-1.5 rounded-full';
                strengthText.textContent = 'Good';
                strengthText.className = 'text-xs font-medium text-yellow-600';
            } else {
                meter.className = 'bg-green-500 h-1.5 rounded-full';
                strengthText.textContent = 'Strong';
                strengthText.className = 'text-xs font-medium text-green-600';
            }
            
            // Update requirements text
            if (feedback.length > 0) {
                requirements.textContent = feedback.join(', ');
            } else {
                requirements.textContent = 'Your password meets all requirements!';
            }
            
            // Check if passwords match
            checkPasswordMatch();
        }
        
        // Check if passwords match
        function checkPasswordMatch() {
            const password = document.getElementById('password').value;
            const confirmPassword = document.getElementById('Input_ConfirmPassword').value;
            const matchMessage = document.getElementById('passwords-match');
            
            if (confirmPassword && password === confirmPassword) {
                matchMessage.classList.remove('hidden');
            } else {
                matchMessage.classList.add('hidden');
            }
        }
    </script>
}